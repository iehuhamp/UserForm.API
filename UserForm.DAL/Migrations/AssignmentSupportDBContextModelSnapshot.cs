// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserForm.DAL.Models;

#nullable disable

namespace UserForm.DAL.Migrations
{
    [DbContext(typeof(AssignmentSupportDBContext))]
    partial class AssignmentSupportDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserForm.DAL.Models.Campus", b =>
                {
                    b.Property<Guid>("CampusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CampusCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CampusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CampusId")
                        .HasName("PK__Campuses__FD598DD666C9DC05");

                    b.HasIndex(new[] { "CampusCode" }, "UQ__Campuses__4D8A9715BD74B188")
                        .IsUnique();

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("UserForm.DAL.Models.FormRegisterService", b =>
                {
                    b.Property<Guid>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<Guid?>("ApprovedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampusId")
                        .HasColumnType("uuid");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ExamDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<int>("FormStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("OriginalFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RejectedAt")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<Guid?>("RejectedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SupportCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("FormId")
                        .HasName("PK__FormRegi__FB05B7DD824FD58D");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("RejectedByUserId");

                    b.HasIndex(new[] { "CampusId" }, "IX_Form_Campus");

                    b.HasIndex(new[] { "OriginalFormId" }, "IX_Form_OriginalForm");

                    b.HasIndex(new[] { "ServiceId" }, "IX_Form_Service");

                    b.HasIndex(new[] { "FormStatusId" }, "IX_Form_Status");

                    b.HasIndex(new[] { "UserId" }, "IX_Form_User");

                    b.ToTable("FormRegisterService", (string)null);
                });

            modelBuilder.Entity("UserForm.DAL.Models.FormStatus", b =>
                {
                    b.Property<int>("FormStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FormStatusId"));

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("FormStatusId")
                        .HasName("PK__FormStat__4B86ED318C51C456");

                    b.HasIndex(new[] { "StatusCode" }, "UQ__FormStat__6A7B44FC87380979")
                        .IsUnique();

                    b.ToTable("FormStatuses");
                });

            modelBuilder.Entity("UserForm.DAL.Models.FormStatusHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("HistoryId"));

                    b.Property<string>("ChangeNote")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("ChangedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<int?>("FromStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("ToStatusId")
                        .HasColumnType("integer");

                    b.HasKey("HistoryId")
                        .HasName("PK__FormStat__4D7B4ABD10EDF276");

                    b.HasIndex("ChangedByUserId");

                    b.HasIndex("FromStatusId");

                    b.HasIndex("ToStatusId");

                    b.HasIndex(new[] { "FormId" }, "IX_FSH_Form");

                    b.ToTable("FormStatusHistory", (string)null);
                });

            modelBuilder.Entity("UserForm.DAL.Models.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("VND");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PaidAt")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<string>("PaymentRef")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal?>("TotalAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(13, 2)")
                        .HasComputedColumnSql("(\"Subtotal\"-\"DiscountAmount\")", true);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoices__D796AAB57DD8DE6F");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "FormId" }, "IX_Invoices_Form");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("UserForm.DAL.Models.InvoiceItem", b =>
                {
                    b.Property<long>("InvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("InvoiceItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(23, 2)")
                        .HasComputedColumnSql("(\"Qty\"*\"UnitPrice\")", true);

                    b.Property<int>("Qty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("InvoiceItemId")
                        .HasName("PK__InvoiceI__478FE09C814A0AD0");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("UserForm.DAL.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryChannel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasDefaultValue("IN_APP");

                    b.Property<Guid?>("FormId")
                        .HasColumnType("uuid");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uuid");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E12329C189A");

                    b.HasIndex("FormId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex(new[] { "ToUserId" }, "IX_Notif_User");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("UserForm.DAL.Models.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationTypeId"));

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("NotificationTypeId")
                        .HasName("PK__Notifica__299002C104FAF234");

                    b.HasIndex(new[] { "TypeCode" }, "UQ__Notifica__3E1CDC7CACEC0AAD")
                        .IsUnique();

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("UserForm.DAL.Models.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentStatusId"));

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PaymentStatusId")
                        .HasName("PK__PaymentS__34F8AC3F7FD3491C");

                    b.HasIndex(new[] { "StatusCode" }, "UQ__PaymentS__6A7B44FC6CB969B4")
                        .IsUnique();

                    b.ToTable("PaymentStatuses");
                });

            modelBuilder.Entity("UserForm.DAL.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE1AE7D395FA");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Roles__8A2B616004AAB738")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("UserForm.DAL.Models.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("ServiceId")
                        .HasName("PK__Services__C51BB00A972460D4");

                    b.HasIndex(new[] { "ServiceCode" }, "UQ__Services__A01D74C9B896996F")
                        .IsUnique();

                    b.ToTable("Services");
                });

            modelBuilder.Entity("UserForm.DAL.Models.SupportSession", b =>
                {
                    b.Property<Guid>("SupportSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AdminUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndedAt")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<string>("OutcomeCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("OutcomeNote")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("SupportSessionId")
                        .HasName("PK__SupportS__C3AF68EE8B19272D");

                    b.HasIndex("AdminUserId");

                    b.HasIndex(new[] { "FormId" }, "IX_SS_Form");

                    b.ToTable("SupportSessions");
                });

            modelBuilder.Entity("UserForm.DAL.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("CampusId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("StudentID");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4C79C63B77");

                    b.HasIndex(new[] { "CampusId" }, "IX_Users_Campus");

                    b.HasIndex(new[] { "RoleId" }, "IX_Users_Role");

                    b.HasIndex(new[] { "Email" }, "UQ_Users_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "StudentId" }, "UQ_Users_StudentID")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserForm.DAL.Models.FormRegisterService", b =>
                {
                    b.HasOne("UserForm.DAL.Models.User", "ApprovedByUser")
                        .WithMany("FormRegisterServiceApprovedByUsers")
                        .HasForeignKey("ApprovedByUserId")
                        .HasConstraintName("FK_Form_ApprovedBy");

                    b.HasOne("UserForm.DAL.Models.Campus", "Campus")
                        .WithMany("FormRegisterServices")
                        .HasForeignKey("CampusId")
                        .IsRequired()
                        .HasConstraintName("FK_Form_Campus");

                    b.HasOne("UserForm.DAL.Models.FormStatus", "FormStatus")
                        .WithMany("FormRegisterServices")
                        .HasForeignKey("FormStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Form_Status");

                    b.HasOne("UserForm.DAL.Models.FormRegisterService", "OriginalForm")
                        .WithMany("InverseOriginalForm")
                        .HasForeignKey("OriginalFormId")
                        .HasConstraintName("FK_Form_Original");

                    b.HasOne("UserForm.DAL.Models.User", "RejectedByUser")
                        .WithMany("FormRegisterServiceRejectedByUsers")
                        .HasForeignKey("RejectedByUserId")
                        .HasConstraintName("FK_Form_RejectedBy");

                    b.HasOne("UserForm.DAL.Models.Service", "Service")
                        .WithMany("FormRegisterServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Form_Service");

                    b.HasOne("UserForm.DAL.Models.User", "User")
                        .WithMany("FormRegisterServiceUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Form_User");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Campus");

                    b.Navigation("FormStatus");

                    b.Navigation("OriginalForm");

                    b.Navigation("RejectedByUser");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserForm.DAL.Models.FormStatusHistory", b =>
                {
                    b.HasOne("UserForm.DAL.Models.User", "ChangedByUser")
                        .WithMany("FormStatusHistories")
                        .HasForeignKey("ChangedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_FSH_ByUser");

                    b.HasOne("UserForm.DAL.Models.FormRegisterService", "Form")
                        .WithMany("FormStatusHistories")
                        .HasForeignKey("FormId")
                        .IsRequired()
                        .HasConstraintName("FK_FSH_Form");

                    b.HasOne("UserForm.DAL.Models.FormStatus", "FromStatus")
                        .WithMany("FormStatusHistoryFromStatuses")
                        .HasForeignKey("FromStatusId")
                        .HasConstraintName("FK_FSH_From");

                    b.HasOne("UserForm.DAL.Models.FormStatus", "ToStatus")
                        .WithMany("FormStatusHistoryToStatuses")
                        .HasForeignKey("ToStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_FSH_To");

                    b.Navigation("ChangedByUser");

                    b.Navigation("Form");

                    b.Navigation("FromStatus");

                    b.Navigation("ToStatus");
                });

            modelBuilder.Entity("UserForm.DAL.Models.Invoice", b =>
                {
                    b.HasOne("UserForm.DAL.Models.FormRegisterService", "Form")
                        .WithMany("Invoices")
                        .HasForeignKey("FormId")
                        .IsRequired()
                        .HasConstraintName("FK_Inv_Form");

                    b.HasOne("UserForm.DAL.Models.PaymentStatus", "PaymentStatus")
                        .WithMany("Invoices")
                        .HasForeignKey("PaymentStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Inv_Status");

                    b.HasOne("UserForm.DAL.Models.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Inv_User");

                    b.Navigation("Form");

                    b.Navigation("PaymentStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserForm.DAL.Models.InvoiceItem", b =>
                {
                    b.HasOne("UserForm.DAL.Models.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_InvItem_Inv");

                    b.HasOne("UserForm.DAL.Models.Service", "Service")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_InvItem_Svc");

                    b.Navigation("Invoice");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("UserForm.DAL.Models.Notification", b =>
                {
                    b.HasOne("UserForm.DAL.Models.FormRegisterService", "Form")
                        .WithMany("Notifications")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_Notif_Form");

                    b.HasOne("UserForm.DAL.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Notif_Type");

                    b.HasOne("UserForm.DAL.Models.User", "ToUser")
                        .WithMany("Notifications")
                        .HasForeignKey("ToUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notif_User");

                    b.Navigation("Form");

                    b.Navigation("NotificationType");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("UserForm.DAL.Models.SupportSession", b =>
                {
                    b.HasOne("UserForm.DAL.Models.User", "AdminUser")
                        .WithMany("SupportSessions")
                        .HasForeignKey("AdminUserId")
                        .IsRequired()
                        .HasConstraintName("FK_SS_Admin");

                    b.HasOne("UserForm.DAL.Models.FormRegisterService", "Form")
                        .WithMany("SupportSessions")
                        .HasForeignKey("FormId")
                        .IsRequired()
                        .HasConstraintName("FK_SS_Form");

                    b.Navigation("AdminUser");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("UserForm.DAL.Models.User", b =>
                {
                    b.HasOne("UserForm.DAL.Models.Campus", "Campus")
                        .WithMany("Users")
                        .HasForeignKey("CampusId")
                        .HasConstraintName("FK_Users_Campus");

                    b.HasOne("UserForm.DAL.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Role");

                    b.Navigation("Campus");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserForm.DAL.Models.Campus", b =>
                {
                    b.Navigation("FormRegisterServices");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserForm.DAL.Models.FormRegisterService", b =>
                {
                    b.Navigation("FormStatusHistories");

                    b.Navigation("InverseOriginalForm");

                    b.Navigation("Invoices");

                    b.Navigation("Notifications");

                    b.Navigation("SupportSessions");
                });

            modelBuilder.Entity("UserForm.DAL.Models.FormStatus", b =>
                {
                    b.Navigation("FormRegisterServices");

                    b.Navigation("FormStatusHistoryFromStatuses");

                    b.Navigation("FormStatusHistoryToStatuses");
                });

            modelBuilder.Entity("UserForm.DAL.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("UserForm.DAL.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("UserForm.DAL.Models.PaymentStatus", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("UserForm.DAL.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserForm.DAL.Models.Service", b =>
                {
                    b.Navigation("FormRegisterServices");

                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("UserForm.DAL.Models.User", b =>
                {
                    b.Navigation("FormRegisterServiceApprovedByUsers");

                    b.Navigation("FormRegisterServiceRejectedByUsers");

                    b.Navigation("FormRegisterServiceUsers");

                    b.Navigation("FormStatusHistories");

                    b.Navigation("Invoices");

                    b.Navigation("Notifications");

                    b.Navigation("SupportSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
