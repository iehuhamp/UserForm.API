// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace UserForm.DAL.Models;

public partial class AssignmentSupportDBContext : DbContext
{
    public AssignmentSupportDBContext()
    {
    }

    public AssignmentSupportDBContext(DbContextOptions<AssignmentSupportDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Campus> Campuses { get; set; }

    public virtual DbSet<FormRegisterService> FormRegisterServices { get; set; }

    public virtual DbSet<FormStatus> FormStatuses { get; set; }

    public virtual DbSet<FormStatusHistory> FormStatusHistories { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<InvoiceItem> InvoiceItems { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<NotificationType> NotificationTypes { get; set; }

    public virtual DbSet<PaymentStatus> PaymentStatuses { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<SupportSession> SupportSessions { get; set; }

    public virtual DbSet<User> Users { get; set; }


    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-RG9V5BJ\\SQLEXPRESS;Initial Catalog=AssignmentSupportDB;User ID=sa;Password=12345");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Campus>(entity =>
        {
            entity.HasKey(e => e.CampusId).HasName("PK__Campuses__FD598DD666C9DC05");

            entity.HasIndex(e => e.CampusCode, "UQ__Campuses__4D8A9715BD74B188").IsUnique();

            entity.Property(e => e.CampusId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CampusCode)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.CampusName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<FormRegisterService>(entity =>
        {
            entity.HasKey(e => e.FormId).HasName("PK__FormRegi__FB05B7DD824FD58D");

            entity.ToTable("FormRegisterService");

            entity.HasIndex(e => e.CampusId, "IX_Form_Campus");

            entity.HasIndex(e => e.OriginalFormId, "IX_Form_OriginalForm");

            entity.HasIndex(e => e.ServiceId, "IX_Form_Service");

            entity.HasIndex(e => e.FormStatusId, "IX_Form_Status");

            entity.HasIndex(e => e.UserId, "IX_Form_User");

            entity.Property(e => e.FormId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AdminNotes).HasMaxLength(1000);
            entity.Property(e => e.ApprovedAt).HasPrecision(0);
            entity.Property(e => e.CourseCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ExamDate).HasPrecision(0);
            entity.Property(e => e.Notes).HasMaxLength(1000);
            entity.Property(e => e.RejectedAt).HasPrecision(0);
            entity.Property(e => e.SubmittedAt)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.SupportCode).HasMaxLength(50);

            entity.HasOne(d => d.ApprovedByUser).WithMany(p => p.FormRegisterServiceApprovedByUsers)
                .HasForeignKey(d => d.ApprovedByUserId)
                .HasConstraintName("FK_Form_ApprovedBy");

            entity.HasOne(d => d.Campus).WithMany(p => p.FormRegisterServices)
                .HasForeignKey(d => d.CampusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Form_Campus");

            entity.HasOne(d => d.FormStatus).WithMany(p => p.FormRegisterServices)
                .HasForeignKey(d => d.FormStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Form_Status");

            entity.HasOne(d => d.OriginalForm).WithMany(p => p.InverseOriginalForm)
                .HasForeignKey(d => d.OriginalFormId)
                .HasConstraintName("FK_Form_Original");

            entity.HasOne(d => d.RejectedByUser).WithMany(p => p.FormRegisterServiceRejectedByUsers)
                .HasForeignKey(d => d.RejectedByUserId)
                .HasConstraintName("FK_Form_RejectedBy");

            entity.HasOne(d => d.Service).WithMany(p => p.FormRegisterServices)
                .HasForeignKey(d => d.ServiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Form_Service");

            entity.HasOne(d => d.User).WithMany(p => p.FormRegisterServiceUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Form_User");
        });

        modelBuilder.Entity<FormStatus>(entity =>
        {
            entity.HasKey(e => e.FormStatusId).HasName("PK__FormStat__4B86ED318C51C456");

            entity.HasIndex(e => e.StatusCode, "UQ__FormStat__6A7B44FC87380979").IsUnique();

            entity.Property(e => e.StatusCode)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<FormStatusHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__FormStat__4D7B4ABD10EDF276");

            entity.ToTable("FormStatusHistory");

            entity.HasIndex(e => e.FormId, "IX_FSH_Form");

            entity.Property(e => e.ChangeNote).HasMaxLength(1000);
            entity.Property(e => e.ChangedAt)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ChangedByUser).WithMany(p => p.FormStatusHistories)
                .HasForeignKey(d => d.ChangedByUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FSH_ByUser");

            entity.HasOne(d => d.Form).WithMany(p => p.FormStatusHistories)
                .HasForeignKey(d => d.FormId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FSH_Form");

            entity.HasOne(d => d.FromStatus).WithMany(p => p.FormStatusHistoryFromStatuses)
                .HasForeignKey(d => d.FromStatusId)
                .HasConstraintName("FK_FSH_From");

            entity.HasOne(d => d.ToStatus).WithMany(p => p.FormStatusHistoryToStatuses)
                .HasForeignKey(d => d.ToStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FSH_To");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.InvoiceId).HasName("PK__Invoices__D796AAB57DD8DE6F");

            entity.HasIndex(e => e.FormId, "IX_Invoices_Form");

            entity.Property(e => e.InvoiceId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Currency)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValue("VND");
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.PaidAt).HasPrecision(0);
            entity.Property(e => e.PaymentRef).HasMaxLength(100);
            entity.Property(e => e.Subtotal).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.TotalAmount)
                .HasComputedColumnSql("([Subtotal]-[DiscountAmount])", true)
                .HasColumnType("decimal(13, 2)");

            entity.HasOne(d => d.Form).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.FormId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Inv_Form");

            entity.HasOne(d => d.PaymentStatus).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.PaymentStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Inv_Status");

            entity.HasOne(d => d.User).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Inv_User");
        });

        modelBuilder.Entity<InvoiceItem>(entity =>
        {
            entity.HasKey(e => e.InvoiceItemId).HasName("PK__InvoiceI__478FE09C814A0AD0");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.LineTotal)
                .HasComputedColumnSql("([Qty]*[UnitPrice])", true)
                .HasColumnType("decimal(23, 2)");
            entity.Property(e => e.Qty).HasDefaultValue(1);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(12, 2)");

            entity.HasOne(d => d.Invoice).WithMany(p => p.InvoiceItems)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvItem_Inv");

            entity.HasOne(d => d.Service).WithMany(p => p.InvoiceItems)
                .HasForeignKey(d => d.ServiceId)
                .HasConstraintName("FK_InvItem_Svc");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__Notifica__20CF2E12329C189A");

            entity.HasIndex(e => e.ToUserId, "IX_Notif_User");

            entity.Property(e => e.NotificationId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Body).IsRequired();
            entity.Property(e => e.DeliveryChannel)
                .IsRequired()
                .HasMaxLength(30)
                .HasDefaultValue("IN_APP");
            entity.Property(e => e.SentAt)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Subject)
                .IsRequired()
                .HasMaxLength(200);

            entity.HasOne(d => d.Form).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.FormId)
                .HasConstraintName("FK_Notif_Form");

            entity.HasOne(d => d.NotificationType).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.NotificationTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Notif_Type");

            entity.HasOne(d => d.ToUser).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.ToUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Notif_User");
        });

        modelBuilder.Entity<NotificationType>(entity =>
        {
            entity.HasKey(e => e.NotificationTypeId).HasName("PK__Notifica__299002C104FAF234");

            entity.HasIndex(e => e.TypeCode, "UQ__Notifica__3E1CDC7CACEC0AAD").IsUnique();

            entity.Property(e => e.TypeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<PaymentStatus>(entity =>
        {
            entity.HasKey(e => e.PaymentStatusId).HasName("PK__PaymentS__34F8AC3F7FD3491C");

            entity.HasIndex(e => e.StatusCode, "UQ__PaymentS__6A7B44FC6CB969B4").IsUnique();

            entity.Property(e => e.StatusCode)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Roles__8AFACE1AE7D395FA");

            entity.HasIndex(e => e.RoleName, "UQ__Roles__8A2B616004AAB738").IsUnique();

            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PK__Services__C51BB00A972460D4");

            entity.HasIndex(e => e.ServiceCode, "UQ__Services__A01D74C9B896996F").IsUnique();

            entity.Property(e => e.ServiceId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ServiceCode)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.ServiceName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ServicePrice).HasColumnType("decimal(12, 2)");
        });

        modelBuilder.Entity<SupportSession>(entity =>
        {
            entity.HasKey(e => e.SupportSessionId).HasName("PK__SupportS__C3AF68EE8B19272D");

            entity.HasIndex(e => e.FormId, "IX_SS_Form");

            entity.Property(e => e.SupportSessionId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.EndedAt).HasPrecision(0);
            entity.Property(e => e.OutcomeCode).HasMaxLength(20);
            entity.Property(e => e.OutcomeNote).HasMaxLength(1000);
            entity.Property(e => e.StartedAt)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.AdminUser).WithMany(p => p.SupportSessions)
                .HasForeignKey(d => d.AdminUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SS_Admin");

            entity.HasOne(d => d.Form).WithMany(p => p.SupportSessions)
                .HasForeignKey(d => d.FormId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SS_Form");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__1788CC4C79C63B77");

            entity.HasIndex(e => e.CampusId, "IX_Users_Campus");

            entity.HasIndex(e => e.RoleId, "IX_Users_Role");

            entity.HasIndex(e => e.Email, "UQ_Users_Email").IsUnique();

            entity.HasIndex(e => e.StudentId, "UQ_Users_StudentID").IsUnique();

            entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastLoginAt).HasPrecision(0);
            entity.Property(e => e.PasswordHash).HasMaxLength(256);
            entity.Property(e => e.StudentId)
                .HasMaxLength(50)
                .HasColumnName("StudentID");
            entity.Property(e => e.StudentName)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.UpdatedAt)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Campus).WithMany(p => p.Users)
                .HasForeignKey(d => d.CampusId)
                .HasConstraintName("FK_Users_Campus");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Users_Role");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}